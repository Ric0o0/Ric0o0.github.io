<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>找出栈中最小的元素, 要求时间复杂度O(1)</title>
    <url>/2021/06/07/GetMinStactk/</url>
    <content><![CDATA[<h3 id="找出栈最小的元素-大部分情况首先想到的就是遍历-但时间复杂度不为1-所以我们要从最开始就需要筛选最小的元素"><a href="#找出栈最小的元素-大部分情况首先想到的就是遍历-但时间复杂度不为1-所以我们要从最开始就需要筛选最小的元素" class="headerlink" title="找出栈最小的元素, 大部分情况首先想到的就是遍历, 但时间复杂度不为1, 所以我们要从最开始就需要筛选最小的元素"></a>找出栈最小的元素, 大部分情况首先想到的就是遍历, 但时间复杂度不为1, 所以我们要从最开始就需要筛选最小的元素</h3><p>思路很简单, 准备两个栈, 这里用Array来代替, 其中一个是正常的arr, 另一个用来存放最小值, 称它为minArr</p>
<p>minArr中存放的为当前最小的元素</p>
<p>arr[3, 2, 1, 3, 2, 1, 0]   minArr[3, 2, 1, 1, 1, 1, 0]</p>
<p>每次执行push入栈操作的时候, arr 与 minArr 同时push, arr.push(输入的value), 在minArr.push()时需要进行判断, 如果 </p>
<ol>
<li><p>minArr数组中的最后一个数 &gt; value   –&gt; minArr要push的还是最后一个数, 而不是新的value</p>
<blockquote>
<p>在第二次 push(3) 时, arr [3, 2, 1, 3]   minArr[3, 2, 1, 1]</p>
<p>最后一个元素1 &lt; 3  , 所以继续存1 , 而不是3 , 这样在取最小值的时候,直接取minArr最后一个即可</p>
</blockquote>
</li>
<li><p>如果最后一个数 &lt; value  –&gt;  minArr就要push这个新的value .</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 取出栈中的最小值, 要求时间复杂度O(1)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack1</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.arr = [];</span><br><span class="line">        <span class="built_in">this</span>.minArr = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.arr.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.minArr.push(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; <span class="built_in">this</span>.getMin())&#123;  <span class="comment">// 当前值小于最小栈顶的值</span></span><br><span class="line">            <span class="built_in">this</span>.minArr.push(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.minArr.push(<span class="built_in">this</span>.minArr[<span class="built_in">this</span>.minArr.length-<span class="number">1</span>])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.arr.push(value)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.arr.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;空表!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.minArr.pop()  <span class="comment">// 弹出就是两个一起弹</span></span><br><span class="line">        <span class="built_in">this</span>.arr.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">getMin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.minArr[<span class="built_in">this</span>.minArr.length-<span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> ms = <span class="keyword">new</span> MyStack1()</span><br><span class="line">ms.push(<span class="number">5</span>)</span><br><span class="line">ms.push(<span class="number">6</span>)</span><br><span class="line">ms.push(<span class="number">6</span>)</span><br><span class="line">ms.push(<span class="number">4</span>)</span><br><span class="line">ms.push(<span class="number">4</span>)</span><br><span class="line">ms.push(<span class="number">8</span>)</span><br><span class="line"><span class="comment">// ms.pop()</span></span><br><span class="line"><span class="built_in">console</span>.log(ms.getMin())</span><br><span class="line"><span class="built_in">console</span>.log(ms)</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>JS链表</title>
    <url>/2021/05/30/JS%E9%93%BE%E8%A1%A8/</url>
    <content><![CDATA[<h2 id="js链表-——-单向链表"><a href="#js链表-——-单向链表" class="headerlink" title="js链表 —— 单向链表"></a>js链表 —— 单向链表</h2><p>1 -&gt; 2 -&gt; 3 -&gt; 4</p>
<p>反转:</p>
<p>4 -&gt; 3 -&gt; 2 -&gt; 1</p>
<p>这一个看明白,其他的就能推出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 单向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;  <span class="comment">// 节点对象</span></span><br><span class="line">    <span class="title">constructor</span> (<span class="params">element</span>) &#123;  <span class="comment">// 初始化</span></span><br><span class="line">        <span class="built_in">this</span>.element = element  <span class="comment">// 节点元素</span></span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span>  <span class="comment">// 指向下一个节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span>  <span class="comment">// 链表大小</span></span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>  <span class="comment">// 头节点指向</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表最后添加元素</span></span><br><span class="line">    append (element) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="comment">// 判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不为空, 就要找到最后一个节点</span></span><br><span class="line">            <span class="keyword">let</span> lastNode = <span class="built_in">this</span>.getNode(<span class="built_in">this</span>.size - <span class="number">1</span>)</span><br><span class="line">            lastNode.next = node  <span class="comment">// 给最后一个元素的next一个指向,就算添加完成</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在链表position位置添加</span></span><br><span class="line">    appendAt (position, element) &#123;</span><br><span class="line">        <span class="comment">// 边界判断</span></span><br><span class="line">        <span class="comment">// position === this.size -&gt; 在最后一个元素之后添加</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span> || position &gt; <span class="built_in">this</span>.size)&#123; </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;out of range&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在position位置添加, node.next = nextNode.next ; preNode.next = node</span></span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element);</span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123; <span class="comment">// 在头元素添加</span></span><br><span class="line">            node.next = <span class="built_in">this</span>.head</span><br><span class="line">            <span class="built_in">this</span>.head = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> preNode = <span class="built_in">this</span>.getNode(position - <span class="number">1</span>)</span><br><span class="line">            node.next = preNode.next</span><br><span class="line">            preNode.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除  只需要改变节点的next指向即可</span></span><br><span class="line">    remove (position) &#123;</span><br><span class="line">        <span class="comment">// 边界判断</span></span><br><span class="line">        <span class="keyword">if</span> (position &lt; <span class="number">0</span>|| position &gt;= <span class="built_in">this</span>.size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;out of range&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// pos = 0  --&gt; this.head = delNode.next</span></span><br><span class="line">        <span class="comment">// pos !- 0 --&gt; pre.next = delNode.next</span></span><br><span class="line">        <span class="keyword">if</span> (position === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> node = <span class="built_in">this</span>.getNode(position)</span><br><span class="line">            <span class="built_in">this</span>.head = node.next</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> preNode = <span class="built_in">this</span>.getNode(position - <span class="number">1</span>)  <span class="comment">// 被删除的前一个的next</span></span><br><span class="line">            preNode.next = preNode.next.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size--</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据元素找下标</span></span><br><span class="line">    indexOf (element) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.size; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (current.element === element)&#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 反转链表</span></span><br><span class="line">    <span class="function"><span class="title">reserve</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> pre = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">this</span>.head !== <span class="literal">null</span>) &#123;</span><br><span class="line">            next = <span class="built_in">this</span>.head.next;  <span class="comment">// next = 头节点的下一个节点</span></span><br><span class="line">            <span class="built_in">this</span>.head.next = pre;  <span class="comment">// 当前头节点的next指向上一个节点</span></span><br><span class="line">            pre = <span class="built_in">this</span>.head;  <span class="comment">// 上一个节点等于当前头节点</span></span><br><span class="line">            <span class="keyword">if</span> (next === <span class="literal">null</span>)&#123;  <span class="comment">// 如果next = null 表示之后没有了,当前是最后一个 跳出程序</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.head = next;  <span class="comment">// 头节点后移一个</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">// 在链表中删除指定的元素</span></span><br><span class="line">    <span class="function"><span class="title">removeElement</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">        <span class="comment">// 找到第一个不需要删除的位置</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.head === element)&#123;</span><br><span class="line">            <span class="built_in">this</span>.size--</span><br><span class="line">            <span class="built_in">this</span>.head = <span class="built_in">this</span>.head.next; <span class="comment">// head: 定格在第一个不等于element的节点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> pre = <span class="built_in">this</span>.head;  <span class="comment">// pre: 前一个不等于element的节点</span></span><br><span class="line">        <span class="keyword">let</span> cur = <span class="built_in">this</span>.head;  <span class="comment">// cur: 当前节点</span></span><br><span class="line">        <span class="keyword">while</span>(cur !== <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.element === element)&#123;</span><br><span class="line">                <span class="comment">// 当前节点的element 与 输入的element相同 , 要删除 , 就将pre.next指向当前节点的下一个节点</span></span><br><span class="line">                pre.next = cur.next;</span><br><span class="line">                <span class="built_in">this</span>.size--</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                pre = cur;  <span class="comment">// 如果不相等, 让pre等于当前节点</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 在循环最后 cur 要等于cur的下一个节点, 来保证while运行</span></span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">getNode</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= <span class="built_in">this</span>.size)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;out of range&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="built_in">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index; i++)&#123;</span><br><span class="line">            current = current.next</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> li = <span class="keyword">new</span> LinkedList()</span><br><span class="line">li.append(<span class="number">1</span>)</span><br><span class="line">li.append(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">li.appendAt(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">li.appendAt(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">li.appendAt(<span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">li.remove(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(li.indexOf(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">console</span>.log(li.indexOf(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(li, &#123;</span><br><span class="line">    <span class="attr">depth</span>: <span class="number">100</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>





]]></content>
      <tags>
        <tag>JS链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/05/07/hello-world/</url>
    <content><![CDATA[<span id="more"></span>

<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
  </entry>
  <entry>
    <title>js双向链表_队列_栈_环形数组</title>
    <url>/2021/06/02/js%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8-%E9%98%9F%E5%88%97-%E6%A0%88/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 双向链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">element</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.element = element <span class="comment">// 元素</span></span><br><span class="line">        <span class="built_in">this</span>.last = <span class="literal">null</span> <span class="comment">// 上一指针</span></span><br><span class="line">        <span class="built_in">this</span>.next = <span class="literal">null</span> <span class="comment">// 下一指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.head = <span class="literal">null</span>  <span class="comment">// 链表头</span></span><br><span class="line">        <span class="built_in">this</span>.tail = <span class="literal">null</span>  <span class="comment">// 链表尾</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从头部添加</span></span><br><span class="line">    addFromHead (element) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element)</span><br><span class="line">        <span class="comment">// 判断this.head是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = node</span><br><span class="line">            <span class="built_in">this</span>.tail = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.head.last = node  <span class="comment">// 原来的头节点last指向新节点</span></span><br><span class="line">            node.next = <span class="built_in">this</span>.head <span class="comment">// 新节点的next指向原来的头节点</span></span><br><span class="line">            <span class="built_in">this</span>.head = node <span class="comment">// head指向新节点</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从尾部添加</span></span><br><span class="line">    addFromTail (element) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = <span class="keyword">new</span> Node(element)</span><br><span class="line">        <span class="comment">// 判断this.head是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = node</span><br><span class="line">            <span class="built_in">this</span>.tail = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            node.last = <span class="built_in">this</span>.tail</span><br><span class="line">            <span class="built_in">this</span>.tail.next = node</span><br><span class="line">            <span class="built_in">this</span>.tail = node</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从头部弹出</span></span><br><span class="line">    popFromHead () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> popNode = <span class="built_in">this</span>.head</span><br><span class="line">        <span class="comment">// 只有一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="built_in">this</span>.tail) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">            <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 正常情况</span></span><br><span class="line">            <span class="built_in">this</span>.head = popNode.next</span><br><span class="line">            <span class="built_in">this</span>.head.last = <span class="literal">null</span></span><br><span class="line">            popNode.next = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> popNode</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 从尾部弹出</span></span><br><span class="line">    popFromTail () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.tail === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> popNode = <span class="built_in">this</span>.tail</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.head === <span class="built_in">this</span>.tail) &#123;</span><br><span class="line">            <span class="built_in">this</span>.head = <span class="literal">null</span></span><br><span class="line">            <span class="built_in">this</span>.tail = <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.tail = popNode.last</span><br><span class="line">            <span class="built_in">this</span>.tail.next = <span class="literal">null</span></span><br><span class="line">            popNode.last = <span class="literal">null</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> popNode</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let dll = new DoubleLinkedList()</span></span><br><span class="line"><span class="comment">// dll.addFromHead(3)</span></span><br><span class="line"><span class="comment">// dll.addFromHead(2)</span></span><br><span class="line"><span class="comment">// dll.addFromHead(1)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// dll.addFromTail(4)</span></span><br><span class="line"><span class="comment">// console.log(dll.popFromTail())</span></span><br><span class="line"><span class="comment">// console.dir(dll, &#123;depth: 100&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 先进先出  头进尾出</span></span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.queue = <span class="keyword">new</span> DoubleLinkedList()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    push (element) &#123;</span><br><span class="line">        <span class="built_in">this</span>.length++</span><br><span class="line">        <span class="built_in">this</span>.queue.addFromHead(element)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pop () &#123;</span><br><span class="line">        <span class="built_in">this</span>.length--</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.queue.popFromTail()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let mq = new MyQueue();</span></span><br><span class="line"><span class="comment">// mq.push(1)</span></span><br><span class="line"><span class="comment">// mq.push(2)</span></span><br><span class="line"><span class="comment">// mq.push(3)</span></span><br><span class="line"><span class="comment">// console.log(mq.pop())</span></span><br><span class="line"><span class="comment">// console.dir(mq, &#123;depth: 100&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.stack = <span class="keyword">new</span> DoubleLinkedList()</span><br><span class="line">        <span class="built_in">this</span>.length = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    push (element) &#123;</span><br><span class="line">        <span class="built_in">this</span>.stack.addFromHead(element)</span><br><span class="line">        <span class="built_in">this</span>.length++</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    pop () &#123;</span><br><span class="line">        <span class="built_in">this</span>.length--</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.stack.popFromHead()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let ms = new MyStack();</span></span><br><span class="line"><span class="comment">// ms.push(1)</span></span><br><span class="line"><span class="comment">// ms.push(2)</span></span><br><span class="line"><span class="comment">// ms.push(3)</span></span><br><span class="line"><span class="comment">// console.log(ms.pop())</span></span><br><span class="line"><span class="comment">// console.dir(ms, &#123;depth: 100&#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params">limit</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.limit = limit</span><br><span class="line">        <span class="built_in">this</span>.size = <span class="number">0</span></span><br><span class="line">        <span class="built_in">this</span>.pushi = <span class="number">0</span>  <span class="comment">// 添加索引</span></span><br><span class="line">        <span class="built_in">this</span>.polli = <span class="number">0</span>  <span class="comment">// 弹出索引</span></span><br><span class="line">        <span class="built_in">this</span>.arr = []</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    push (value) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="built_in">this</span>.limit) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;满了!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.arr[<span class="built_in">this</span>.pushi] = value;</span><br><span class="line">        <span class="built_in">this</span>.size++</span><br><span class="line">        <span class="built_in">this</span>.pushi = <span class="built_in">this</span>.nextIndex(<span class="built_in">this</span>.pushi);</span><br><span class="line">        <span class="comment">// console.log(&#x27;pushi: &#x27;, this.pushi, &#x27;val: &#x27; , value)</span></span><br><span class="line">        <span class="comment">// console.log(this.arr)</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.size === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;空的!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="built_in">this</span>.arr[<span class="built_in">this</span>.polli];</span><br><span class="line">        <span class="built_in">this</span>.size--;</span><br><span class="line">        <span class="built_in">this</span>.polli = <span class="built_in">this</span>.nextIndex(<span class="built_in">this</span>.polli)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(res)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    nextIndex (i) &#123;</span><br><span class="line">        <span class="keyword">return</span> i &lt; <span class="built_in">this</span>.limit - <span class="number">1</span> ? i+<span class="number">1</span> : <span class="number">0</span>  <span class="comment">// 不能写i++</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">printArr</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="built_in">this</span>.arr)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let marr = new MyArray(5)</span></span><br><span class="line"><span class="comment">// marr.push(0)</span></span><br><span class="line"><span class="comment">// marr.push(1)</span></span><br><span class="line"><span class="comment">// marr.push(2)</span></span><br><span class="line"><span class="comment">// marr.push(3)</span></span><br><span class="line"><span class="comment">// marr.push(4)</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.push(5)</span></span><br><span class="line"><span class="comment">// marr.push(6)</span></span><br><span class="line"><span class="comment">// marr.push(7)</span></span><br><span class="line"><span class="comment">// marr.push(8)</span></span><br><span class="line"><span class="comment">// marr.push(9)</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.pop()</span></span><br><span class="line"><span class="comment">// marr.printArr()</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>vue输入框防抖.md</title>
    <url>/2021/05/15/vue%E8%BE%93%E5%85%A5%E6%A1%86%E9%98%B2%E6%8A%96-md/</url>
    <content><![CDATA[<h2 id="Vue踩坑之-一-——-Vue中input防抖"><a href="#Vue踩坑之-一-——-Vue中input防抖" class="headerlink" title="Vue踩坑之(一) —— Vue中input防抖"></a>Vue踩坑之(一) —— Vue中input防抖</h2><p>在有道网页翻译中，无意间发现这样一个功能，恰好我正在写一个小项目，其中一个功能就需要，在input输入框中输入，然后根据输入内容调用api，但是如果输入速度太快不能无限制调用，需要加防抖  </p>
<p>直接上代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;addword&quot;&gt;</span><br><span class="line">    &lt;p&gt;添加单词&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;iText&quot; @input=&quot;debounce(verifyWord, 500)()&quot;&gt;  &lt;!--必须调用返回的函数--&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; vword &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;AddWord&#x27;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      iText: &#x27;&#x27;,  // input中的值</span><br><span class="line">      vword: &#x27;&#x27;,  // 要显示的值</span><br><span class="line">      timer: null,  // 定时器</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    verifyWord () &#123;</span><br><span class="line">      if (this.iText.trim() !== &#x27;&#x27;) &#123;</span><br><span class="line">        this.vword = this.iText</span><br><span class="line">        // 此处调用api</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    debounce (func, delay)&#123;</span><br><span class="line">      // let timer = null  定时器不能在此处定义！！</span><br><span class="line">      let context = this</span><br><span class="line">      let args = arguments</span><br><span class="line">      console.log(this)  // --&gt; VueComponent</span><br><span class="line">      return function () &#123;</span><br><span class="line">        // console.log(this)  --&gt; undefined</span><br><span class="line">        clearTimeout(context.timer)</span><br><span class="line">        context.timer = setTimeout(()=&gt; &#123;</span><br><span class="line">          func.apply(context, args)</span><br><span class="line">        &#125;, delay)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">#addword &#123;</span><br><span class="line">  border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>



<p>总结</p>
<p>防抖函数的基本原理不在此赘述，只针对个人vue项目中的坑，做一个总结  </p>
<ol>
<li>防抖函数(debounce)返回值是一个函数，通过@input监听时，需要再次调用，否则不执行</li>
<li>定时器timer定义在data中，而非debounce函数中的原因<blockquote>
<p>定义在data中，在vue组件创建时，timer会被创建，且是唯一的；如果定义在debounce函数中，@input每次触发debounce都会新创建一个独立的timer,防抖失效</p>
</blockquote>
</li>
<li>this指向<blockquote>
<p>debounce函数中的this指向为VueComponent,这点很容易理解，但在函数返回值中的this为undefined(能力有限实在不知道原因)， 所以需要在return之前，将this保存下来，这样才能取消定时器（定时器也在组件中）</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>vue 防抖</tag>
      </tags>
  </entry>
  <entry>
    <title>归并排序</title>
    <url>/2021/06/25/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>arr = [3, 4, 2, 1] 将arr升序排序</p>
<p>先进入arr的左侧, 将arr不断一分为二, 直到只有一个值为止(这就是base case, 即 l = r), 如图, 左 3 , 右 4, 然后将这两个数排序 –&gt; arr = [3, 4, 2, 1] ; 这时候进入数组右侧, 依旧不断一分为二, 直到base case, 左 2 右 1, 将这两个数排序 –&gt; arr = [3, 4, 1, 2] ; </p>
<p>最后回到arr的最外层, 然后排序, 以此为例解释merge函数的过程:</p>
<p>现在的数组是 3 4 1 2</p>
<ol>
<li>3 和 1 比较 –&gt; 3比1大 –&gt; 让help[0] = 1, 然后p2指针+1</li>
<li> 3 和 2 比    –&gt;  3大于2 –&gt; help[1] = 2 , p2指针+1 , 注意此时p2已经越界, 无法再比较</li>
<li> 直接把 3 4 添加进help</li>
<li>让arr[l + i] = help[i] , 把help中的值全部拷贝给arr, 但是此时是以最终形式为例(l = 0), 如果此时要拷贝的是arr的右半部分, 必须得是 l + i , 否则就乱了</li>
</ol>
<h4 id="从下一级不断向上一级排序-上一级排序是在下一级已经排好的基础上进行排序-所以当p1或p2越界时-可以直接无脑把剩下值的拷贝进help"><a href="#从下一级不断向上一级排序-上一级排序是在下一级已经排好的基础上进行排序-所以当p1或p2越界时-可以直接无脑把剩下值的拷贝进help" class="headerlink" title="从下一级不断向上一级排序, 上一级排序是在下一级已经排好的基础上进行排序, 所以当p1或p2越界时, 可以直接无脑把剩下值的拷贝进help"></a>从下一级不断向上一级排序, 上一级排序是在下一级已经排好的基础上进行排序, 所以当p1或p2越界时, 可以直接无脑把剩下值的拷贝进help</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 递归版本</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*       [3 4 2 1]</span></span><br><span class="line"><span class="comment">*        /     \</span></span><br><span class="line"><span class="comment">*      3 4     2 1</span></span><br><span class="line"><span class="comment">*      / \     /  \</span></span><br><span class="line"><span class="comment">*     3   4    2   1</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">// let arr = [3, 4, 2, 1]</span></span><br><span class="line"><span class="keyword">let</span> arr = generateRandomArray(<span class="number">1000000</span>, <span class="number">100000</span>)</span><br><span class="line"><span class="keyword">let</span> time0 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">rank(arr, <span class="number">0</span>, arr.length-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> time1 = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="built_in">console</span>.log(time1 - time0 + <span class="string">&#x27;ms&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rank</span>(<span class="params">arr, l, r</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> process(arr, l, r)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span> (<span class="params">arr, l, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l === r)&#123; <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> mid = l + ((r - l) &gt;&gt; <span class="number">1</span>)</span><br><span class="line">    process(arr, l, mid)  <span class="comment">// 左侧排序</span></span><br><span class="line">    process(arr, mid+<span class="number">1</span>, r)  <span class="comment">// 右侧排序</span></span><br><span class="line">    merge(arr, l, mid, r)  <span class="comment">// 左右全部排序</span></span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span> (<span class="params">arr, l, mid, r</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> p1 = l;  <span class="comment">// 左侧指针, 负责左侧(l - mid)</span></span><br><span class="line">    <span class="keyword">let</span> p2 = mid + <span class="number">1</span>  <span class="comment">// 右侧指针, 负责右侧</span></span><br><span class="line">    <span class="keyword">let</span> help = <span class="keyword">new</span> <span class="built_in">Array</span>(r-l+<span class="number">1</span>)  <span class="comment">// 辅助数组, 长度为规定的r - l +1 </span></span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>  <span class="comment">// 辅助索引</span></span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid &amp;&amp; p2 &lt;= r)&#123;  <span class="comment">// 只有p1 和 p2都不越界时才有效</span></span><br><span class="line">        <span class="comment">// 如果把p1放入help中, p1++, 否则p2++  p1/p2一次只加一个, 最终一定有一个先越界</span></span><br><span class="line">        help[i++] = arr[p1] &lt;= arr[p2] ? arr[p1++] : arr[p2++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 下面两个while只会运行一个</span></span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= mid)&#123;  <span class="comment">// p2越界之后, 直接把arr[p1 ~ mid] 的值直接放到help中</span></span><br><span class="line">        help[i++] = arr[p1++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2 &lt;= r)&#123;  <span class="comment">// p1越界后, 直接把arr[p2 ~ r] 的值直接放到help中</span></span><br><span class="line">        help[i++] = arr[p2++]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; help.length; i++)&#123;</span><br><span class="line">        arr[l + i] = help[i]  <span class="comment">// 把help中的值,拷贝到对应的arr中, 所以 l + i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// console.log(`第$&#123;count++&#125;次: $&#123;arr&#125;`)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateRandomArray</span>(<span class="params">maxSize, maxValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.random()* (maxSize + <span class="number">1</span>); i++)&#123;</span><br><span class="line">        arr.push((<span class="built_in">Math</span>.random() * (maxValue + <span class="number">1</span>)) - (<span class="built_in">Math</span>.random() * (maxValue +<span class="number">1</span> )))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(arr)</span><br><span class="line">    <span class="built_in">console</span>.log(arr.length)</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>归并排序</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇blog</title>
    <url>/2021/05/07/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    <content><![CDATA[<h2 id="hexo-指令"><a href="#hexo-指令" class="headerlink" title="hexo 指令"></a>hexo 指令</h2><pre><code>hexo n (new)创建新文章
hexo s (server)在本地预览
hexo clean 清除缓存与已生成的静态文件
hexo g (generate)生成静态文件
hexo d (deploy)部署
</code></pre>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a class="link"   href="http://www.codesheep.cn/" >www.codesheep.cn<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>栈实现队列--队列实现栈</title>
    <url>/2021/06/10/%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97-%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
    <content><![CDATA[<h2 id="用栈实现队列-用队列实现栈"><a href="#用栈实现队列-用队列实现栈" class="headerlink" title="用栈实现队列, 用队列实现栈"></a>用栈实现队列, 用队列实现栈</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用栈实现队列</span></span><br><span class="line"><span class="comment">// 队列: 先进先出</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueenByStack</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 用两个栈实现队列, 栈特性先进后出, 用两个栈来倒</span></span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.pushStack = [];</span><br><span class="line">        <span class="built_in">this</span>.popStack = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.pushStack.push(val)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="title">poll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.pushStack.length === <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.popStack.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;queue is empty!&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.pushToPop()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.popStack.pop()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">pushToPop</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 在需要弹出栈的时候, 将pushStack中的数据倒入popStack, 让先进的在第一个弹出来</span></span><br><span class="line">        <span class="comment">// 只有在popStack中没有元素的时候才能倒, 否则就乱套了</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.popStack.length === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">this</span>.pushStack.length !== <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">this</span>.popStack.push(<span class="built_in">this</span>.pushStack.pop())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// let mq = new MyQueenByStack()</span></span><br><span class="line"><span class="comment">// mq.push(1)</span></span><br><span class="line"><span class="comment">// mq.push(2)</span></span><br><span class="line"><span class="comment">// mq.push(3)</span></span><br><span class="line"><span class="comment">// mq.push(4)</span></span><br><span class="line"><span class="comment">// console.log(mq.poll())</span></span><br><span class="line"><span class="comment">// console.log(mq.poll())</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列实现栈</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStackByQueues</span> </span>&#123;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.dataQueue = [];</span><br><span class="line">        <span class="built_in">this</span>.helpQueue = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">push</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.dataQueue.push(val);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//两个队列</span></span><br><span class="line">    <span class="comment">//  data:  [5 4 3 2 1]  想把1提出来</span></span><br><span class="line">    <span class="comment">//  help:  []</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//  要提出5</span></span><br><span class="line">    <span class="comment">//  data:  [1]</span></span><br><span class="line">    <span class="comment">//  help:  [5 4 3 2]</span></span><br><span class="line">    <span class="function"><span class="title">pop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.dataQueue.length === <span class="number">0</span> &amp;&amp; <span class="built_in">this</span>.helpQueue.length === <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;stack is empty!&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.convert()</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.helpQueue[<span class="number">0</span>]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">convert</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">this</span>.dataQueue.length !== <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.helpQueue.push(<span class="built_in">this</span>.dataQueue.shift())</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 让 dataQueue 永远是数据多的  ;  helpQueue 永远是要弹出的</span></span><br><span class="line">        </span><br><span class="line">        [<span class="built_in">this</span>.dataQueue, <span class="built_in">this</span>.helpQueue] = [<span class="built_in">this</span>.helpQueue, <span class="built_in">this</span>.dataQueue] <span class="comment">// 数组互换</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mq = <span class="keyword">new</span> MyStackByQueues()</span><br><span class="line">mq.push(<span class="number">5</span>)</span><br><span class="line">mq.push(<span class="number">4</span>)</span><br><span class="line">mq.push(<span class="number">3</span>)</span><br><span class="line">mq.push(<span class="number">2</span>)</span><br><span class="line">mq.push(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">console</span>.log(mq.pop())</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>超级水王</title>
    <url>/2021/05/28/%E8%B6%85%E7%BA%A7%E6%B0%B4%E7%8E%8B/</url>
    <content><![CDATA[<h1 id="超级水王"><a href="#超级水王" class="headerlink" title="超级水王"></a>超级水王</h1><h3 id="在一个数组中，有一个数a出现的次数，大于数组长度N的一半，称a为水王数，找出a"><a href="#在一个数组中，有一个数a出现的次数，大于数组长度N的一半，称a为水王数，找出a" class="headerlink" title="在一个数组中，有一个数a出现的次数，大于数组长度N的一半，称a为水王数，找出a"></a>在一个数组中，有一个数a出现的次数，大于数组长度N的一半，称a为水王数，找出a</h3><p>假设有一个数组[1,3, 2, 3 ,1 ,2 ,2 , 3, 3 ,1 ,3 , 3, 3]</p>
<p>N ：13</p>
<p>1: 3次</p>
<p>2: 3次</p>
<p>3: 7次 (水王)</p>
<p>使用常规方法： 遍历数组，同时创建{1:3， 2:3， 3:7} ， 然后在对象中找出出现次数最多的</p>
<hr>
<p>如何更优雅的找出水王？</p>
<p>直接上代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span> (<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对传入的数据做筛除， 不能为空， 长度不能为0</span></span><br><span class="line">    <span class="keyword">if</span> (arr === <span class="literal">null</span> || arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -------------------------------</span></span><br><span class="line">    <span class="keyword">let</span> candidate = <span class="literal">null</span>  <span class="comment">// 候选值</span></span><br><span class="line">    <span class="keyword">let</span> restHP = <span class="number">0</span>  <span class="comment">// 剩余血量</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> cur <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (restHP === <span class="number">0</span>) &#123; <span class="comment">// 没有候选</span></span><br><span class="line">            candidate = cur</span><br><span class="line">            restHP = <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur !== candidate) &#123; <span class="comment">// 当前值 不等于 候选</span></span><br><span class="line">            restHP--</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 当前值等于候选</span></span><br><span class="line">            restHP++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (restHP === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// -------------------------------</span></span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> arr) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num === candidate) &#123;</span><br><span class="line">            count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// arr.length &gt;&gt; 1 = arr.length / 2</span></span><br><span class="line">    <span class="keyword">return</span> count &gt; (arr.length &gt;&gt; <span class="number">1</span>) ? <span class="built_in">console</span>.log(candidate) : <span class="built_in">console</span>.log(<span class="string">&#x27;null&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>在最开始初始化两个变量， 候选者candidate=null， 剩余血量restHP = 0, </p>
<p>循环遍历数组， 把arr[0]给candidate， 并且赋予它1点血量， restHP=1</p>
</blockquote>
<blockquote>
<p>继续遍历, 如果arr[1] 与 candidate(就是arr[0]) 相等，那么再给它1点血量, restHP = 2 </p>
<p>如果arr[1] 与 candidate 不相等，就会打掉candidate 1点血量， restHP = 0</p>
</blockquote>
<p>综上， 每次循环都会碰见遇到3种情况：</p>
<ol>
<li>restHP === 0  –&gt; 需要把当前值赋给candidate, 并且 给restHP 1点血量， restHP = 1</li>
<li>arr[i] === candidate  –&gt;  值相同，意味着队伍壮大，就会多一点血量  restHP++</li>
<li>arr[i] !== candidate   –&gt;  值不相同，就需要牺牲一点血量一换一， 所以restHP–</li>
</ol>
<p>完全遍历完成以后，程序会有两种情况</p>
<ol>
<li><p>restHP === 0 –&gt; 每一个数都被消耗殆尽， 没有坚持到最后的数, 所以直接return -1</p>
</li>
<li><p>restHP !== 0  –&gt;  </p>
<ol>
<li>真的有一个数坚挺到最后</li>
<li>假象</li>
</ol>
<p>不管是哪个，我们都需要再遍历一次，很简单，定义一个count = 0, 如果遍历到元素与当前candidate相同， count++</p>
<p>最后，看count的值，是否大于arr.length的一半， 如果是， 那就是真的； 不是，那就是个骗子 </p>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>WPF MVVM下按钮命令绑定</title>
    <url>/2023/02/23/wpf/WPF%20MVVM%E4%B8%8B%E6%8C%89%E9%92%AE%E5%91%BD%E4%BB%A4%E7%BB%91%E5%AE%9A/</url>
    <content><![CDATA[<h1 id="WPF-MVVM框架下按钮命令绑定"><a href="#WPF-MVVM框架下按钮命令绑定" class="headerlink" title="WPF MVVM框架下按钮命令绑定"></a>WPF MVVM框架下按钮命令绑定</h1><p>需求：</p>
<ol>
<li>在输入框内无内容时，Click me按钮不可用</li>
<li>点击Close Window按钮关闭窗口</li>
</ol>
<p>效果：<br><img  
                     lazyload
                     alt="image"
                     data-src="/img/wpf_mvvm_1.png"
                     
                ></p>
<p>目录结构：</p>
<img  
                     lazyload
                     alt="image"
                     data-src="/img/content1.png"
                     
                >


<br>

<p>app.xaml中 <code>StartupUri=&quot;./View/MainWindow.xaml&quot;</code><br>nuget: 安装 Microsoft.Xaml.Behaviors.Wpf</p>
<p>MainWindow.xaml</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;Window x:Class=&quot;MVVMTest1.MainWindow&quot;</span><br><span class="line">        xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span><br><span class="line">        xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span><br><span class="line">        xmlns:d=&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span><br><span class="line">        xmlns:mc=&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span><br><span class="line">        xmlns:local=&quot;clr-namespace:MVVMTest1&quot;</span><br><span class="line">        xmlns:vm =&quot;clr-namespace:MVVMTest1.ViewModel&quot;  ViewModel命名空间</span><br><span class="line">        xmlns:i=&quot;http://schemas.microsoft.com/xaml/behaviors&quot;  引入behavior命名空间</span><br><span class="line">        xmlns:behavior=&quot;clr-namespace:MVVMTest1.Behavior&quot;</span><br><span class="line">        mc:Ignorable=&quot;d&quot;</span><br><span class="line">        Title=&quot;MainWindow&quot; Height=&quot;450&quot; Width=&quot;800&quot;</span><br><span class="line">        &gt;</span><br><span class="line">    &lt;i:Interaction.Behaviors&gt;</span><br><span class="line">        &lt;behavior:WindowBehavior IsClose=&quot;&#123;Binding WindowClose&#125;&quot;/&gt;</span><br><span class="line">    &lt;/i:Interaction.Behaviors&gt;</span><br><span class="line">    &lt;Window.DataContext&gt;</span><br><span class="line">        &lt;vm:MainWindowViewModel/&gt;  datacontext</span><br><span class="line">    &lt;/Window.DataContext&gt;</span><br><span class="line">    &lt;StackPanel HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Center&quot; TextElement.FontSize=&quot;32&quot;&gt;</span><br><span class="line">        &lt;TextBox Width=&quot;300&quot; Height=&quot;40&quot; Text=&quot;&#123;Binding Text, UpdateSourceTrigger=PropertyChanged&#125;&quot;/&gt;</span><br><span class="line">        &lt;Button Width=&quot;150&quot; Height=&quot;50&quot; Margin=&quot;0,20,0,0&quot; Content=&quot;click me&quot; Command=&quot;&#123;Binding ClickCommand&#125;&quot;/&gt;</span><br><span class="line">        &lt;Button Content=&quot;Close Window&quot; </span><br><span class="line">                Command=&quot;&#123;Binding CloseWindowCommand&#125;&quot; </span><br><span class="line">                /&gt;</span><br><span class="line">    &lt;/StackPanel&gt;</span><br><span class="line">&lt;/Window&gt;</span><br></pre></td></tr></table></figure>

<p>MainWindow.xaml.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">MainWindow</span> : <span class="title">Window</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindow</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            InitializeComponent();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>BaseCommand.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseCommand</span> : <span class="title">ICommand</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> EventHandler CanExecuteChanged  <span class="comment">// 不加下面这俩 add remove，CanExecute只会触发一次！！！</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">add</span> &#123; CommandManager.RequerySuggested += <span class="keyword">value</span>; &#125;</span><br><span class="line">            <span class="keyword">remove</span> &#123; CommandManager.RequerySuggested -= <span class="keyword">value</span>; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">CanExecute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> DoCanExecute?.Invoke(parameter) == <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Execute</span>(<span class="params"><span class="built_in">object</span> parameter</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            DoExecute?.Invoke(parameter);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Action&lt;<span class="built_in">object</span>&gt; DoExecute &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt; DoCanExecute &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>BaseViewModel.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseViewModel</span> : <span class="title">INotifyPropertyChanged</span></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">event</span> PropertyChangedEventHandler PropertyChanged;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">OnPropertyChanged</span>(<span class="params">[CallerMemberName] <span class="built_in">string</span> propName = <span class="string">&quot;&quot;</span></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            PropertyChanged?.Invoke(<span class="keyword">this</span>, <span class="keyword">new</span> PropertyChangedEventArgs(propName));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>MainWindowViewModel.cs</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MainWindowViewModel</span> : <span class="title">BaseViewModel</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">string</span> text;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">string</span> Text</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> text; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; text = <span class="keyword">value</span>; OnPropertyChanged(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">private</span> <span class="built_in">bool</span> windowClose;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> WindowClose</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> windowClose; &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; windowClose = <span class="keyword">value</span>; OnPropertyChanged(); &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> BaseCommand ClickCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">        <span class="keyword">public</span> BaseCommand CloseWindowCommand &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MainWindowViewModel</span>(<span class="params"></span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            ClickCommand = <span class="keyword">new</span> BaseCommand();</span><br><span class="line">            ClickCommand.DoCanExecute = <span class="keyword">new</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt;((o) =&gt; !<span class="built_in">string</span>.IsNullOrEmpty(Text)); ;</span><br><span class="line">            ClickCommand.DoExecute = <span class="keyword">new</span> Action&lt;<span class="built_in">object</span>&gt;((o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                Text = <span class="string">&quot;1234&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            CloseWindowCommand = <span class="keyword">new</span> BaseCommand();</span><br><span class="line">            CloseWindowCommand.DoCanExecute = <span class="keyword">new</span> Func&lt;<span class="built_in">object</span>, <span class="built_in">bool</span>&gt;((o)=&gt; <span class="literal">true</span>);</span><br><span class="line">            CloseWindowCommand.DoExecute = <span class="keyword">new</span> Action&lt;<span class="built_in">object</span>&gt;((o) =&gt;</span><br><span class="line">            &#123;</span><br><span class="line">                WindowClose = <span class="literal">true</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">WindowBehavior</span> : <span class="title">Behavior</span>&lt;<span class="title">Window</span>&gt;</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 快捷键 propdp两次tab</span></span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">bool</span> IsClose</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> (<span class="built_in">bool</span>)GetValue(IsCloseProperty); &#125;</span><br><span class="line">            <span class="keyword">set</span> &#123; SetValue(IsCloseProperty, <span class="keyword">value</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">readonly</span> DependencyProperty IsCloseProperty =</span><br><span class="line">            DependencyProperty.Register(<span class="string">&quot;IsClose&quot;</span>, <span class="keyword">typeof</span>(<span class="built_in">bool</span>), <span class="keyword">typeof</span>(WindowBehavior), <span class="keyword">new</span> PropertyMetadata(<span class="literal">false</span>, OnClosePropertyChanged));</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">OnClosePropertyChanged</span>(<span class="params">DependencyObject d, DependencyPropertyChangedEventArgs e</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Window window = d <span class="keyword">as</span> Window;</span><br><span class="line">            <span class="built_in">bool</span> newVal = (<span class="built_in">bool</span>)e.NewValue;</span><br><span class="line">            <span class="keyword">if</span> (newVal)</span><br><span class="line">            &#123;</span><br><span class="line">                window.Close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





]]></content>
  </entry>
</search>
